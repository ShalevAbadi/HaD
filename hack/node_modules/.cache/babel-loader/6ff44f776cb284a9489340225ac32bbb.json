{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _intersection = require('./intersection');\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * Monitors scroll, and triggers the children function with updated props\n *\n <Observer>\n {inView => (\n   <h1>{`${inView}`}</h1>\n )}\n </Observer>\n */\n\n\nvar Observer = function (_React$Component) {\n  _inherits(Observer, _React$Component);\n\n  function Observer() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Observer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Observer.__proto__ || Object.getPrototypeOf(Observer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      inView: false\n    }, _this.node = null, _this.handleNode = function (node) {\n      if (_this.node) (0, _intersection.unobserve)(_this.node);\n      _this.node = node;\n\n      _this.observeNode();\n\n      if (_this.props.innerRef) {\n        _this.props.innerRef(node);\n      }\n    }, _this.handleChange = function (inView) {\n      _this.setState({\n        inView: inView\n      });\n\n      if (_this.props.onChange) {\n        _this.props.onChange(inView);\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Observer, [{\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      // If a IntersectionObserver option changed, reinit the observer\n      if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold) {\n        (0, _intersection.unobserve)(this.node);\n        this.observeNode();\n      }\n\n      if (prevState.inView !== this.state.inView) {\n        if (this.state.inView && this.props.triggerOnce) {\n          (0, _intersection.unobserve)(this.node);\n          this.node = null;\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this.node) {\n        (0, _intersection.unobserve)(this.node);\n        this.node = null;\n      }\n    }\n  }, {\n    key: 'observeNode',\n    value: function observeNode() {\n      if (!this.node) return;\n      var _props = this.props,\n          threshold = _props.threshold,\n          root = _props.root,\n          rootMargin = _props.rootMargin,\n          rootId = _props.rootId;\n      (0, _intersection.observe)(this.node, this.handleChange, {\n        threshold: threshold,\n        root: root,\n        rootMargin: rootMargin\n      }, rootId);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props2 = this.props,\n          children = _props2.children,\n          render = _props2.render,\n          tag = _props2.tag,\n          innerRef = _props2.innerRef,\n          triggerOnce = _props2.triggerOnce,\n          threshold = _props2.threshold,\n          root = _props2.root,\n          rootId = _props2.rootId,\n          rootMargin = _props2.rootMargin,\n          props = _objectWithoutProperties(_props2, ['children', 'render', 'tag', 'innerRef', 'triggerOnce', 'threshold', 'root', 'rootId', 'rootMargin']);\n\n      var inView = this.state.inView;\n      return React.createElement(tag, _extends({}, props, {\n        ref: this.handleNode\n      }), // If render is a function, use it to render content when in view\n      typeof render === 'function' ? render(inView) : null, // If children is a function, render it with the current inView status.\n      // Otherwise always render children. Assume onChange is being used outside, to control the the state of children.\n      typeof children === 'function' ? children(inView) : children);\n    }\n  }]);\n\n  return Observer;\n}(React.Component);\n\nObserver.defaultProps = {\n  tag: 'div',\n  threshold: 0,\n  triggerOnce: false\n};\nexports.default = Observer;","map":null,"metadata":{},"sourceType":"script"}