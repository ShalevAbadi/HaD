{"ast":null,"code":"var _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _class, _temp2;\n\nvar _templateObject = _taggedTemplateLiteralLoose([\"\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n\\n  display: flex;\\n  justify-content: center;\\n  flex-shrink: 0;\\n  align-items: center;\\n\\n  z-index: 11;\\n  transition: background-color 0.2s linear;\\n\\n  overflow-y: auto;\\n  -webkit-overflow-scrolling: touch;\\n\"], [\"\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  right: 0;\\n  bottom: 0;\\n\\n  display: flex;\\n  justify-content: center;\\n  flex-shrink: 0;\\n  align-items: center;\\n\\n  z-index: 11;\\n  transition: background-color 0.2s linear;\\n\\n  overflow-y: auto;\\n  -webkit-overflow-scrolling: touch;\\n\"]),\n    _templateObject2 = _taggedTemplateLiteralLoose([\"\\n  position: absolute;\\n  top: 0;\\n  height: 1px;\\n  width: 100%;\\n\"], [\"\\n  position: absolute;\\n  top: 0;\\n  height: 1px;\\n  width: 100%;\\n\"]);\n\nfunction _taggedTemplateLiteralLoose(strings, raw) {\n  strings.raw = raw;\n  return strings;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport React, { Component } from \"react\";\nimport { Motion, spring, presets } from \"react-motion\";\nimport PropTypes from \"prop-types\";\nimport document from \"global/document\";\nimport Observer from \"react-intersection-observer\";\nimport { css } from \"emotion\";\nimport { createPortal } from \"react-dom\";\nimport { isDirectionBottom, isDirectionTop, isDirectionLeft, isDirectionRight, isClientSide } from \"./helpers\";\n\nif (isClientSide()) {\n  require(\"intersection-observer\");\n}\n\nvar Drawer = (_temp2 = _class = function (_Component) {\n  _inherits(Drawer, _Component);\n\n  function Drawer() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Drawer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _Component.call.apply(_Component, [this].concat(args))), _this), _this.state = {\n      open: _this.props.open,\n      thumb: 0,\n      start: 0,\n      position: 0,\n      touching: false,\n      listenersAttached: false\n    }, _this.MAX_NEGATIVE_SCROLL = 20, _this.SCROLL_TO_CLOSE = 75, _this.ALLOW_DRAWER_TRANSFORM = true, _this.attachListeners = function (drawer) {\n      var _this$props = _this.props,\n          dontApplyListeners = _this$props.dontApplyListeners,\n          getModalRef = _this$props.getModalRef,\n          direction = _this$props.direction;\n      var listenersAttached = _this.state.listenersAttached; // only attach listeners once as this function gets called every re-render\n\n      if (!drawer || listenersAttached || dontApplyListeners) return;\n      _this.drawer = drawer;\n      getModalRef(drawer);\n\n      _this.drawer.addEventListener(\"touchend\", _this.release);\n\n      _this.drawer.addEventListener(\"touchmove\", _this.drag);\n\n      _this.drawer.addEventListener(\"touchstart\", _this.tap);\n\n      var position = 0;\n\n      if (isDirectionRight(direction)) {\n        position = drawer.scrollWidth;\n      }\n\n      _this.setState({\n        listenersAttached: true,\n        position: position\n      }, function () {\n        setTimeout(function () {\n          // trigger reflow so webkit browsers calculate height properly ðŸ˜”\n          // https://bugs.webkit.org/show_bug.cgi?id=184905\n          _this.drawer.style.display = \"none\";\n          void _this.drawer.offsetHeight;\n          _this.drawer.style.display = \"\";\n        }, 300);\n      });\n    }, _this.removeListeners = function () {\n      if (!_this.drawer) return;\n\n      _this.drawer.removeEventListener(\"touchend\", _this.release);\n\n      _this.drawer.removeEventListener(\"touchmove\", _this.drag);\n\n      _this.drawer.removeEventListener(\"touchstart\", _this.tap);\n\n      _this.setState({\n        listenersAttached: false\n      });\n    }, _this.tap = function (event) {\n      var _event$touches$ = event.touches[0],\n          pageY = _event$touches$.pageY,\n          pageX = _event$touches$.pageX;\n      var start = isDirectionBottom(_this.props.direction) || isDirectionTop(_this.props.direction) ? pageY : pageX; // reset NEW_POSITION and MOVING_POSITION\n\n      _this.NEW_POSITION = 0;\n      _this.MOVING_POSITION = 0;\n\n      _this.setState(function () {\n        return {\n          thumb: start,\n          start: start,\n          touching: true\n        };\n      });\n    }, _this.drag = function (event) {\n      var direction = _this.props.direction;\n      var _this$state = _this.state,\n          thumb = _this$state.thumb,\n          start = _this$state.start,\n          position = _this$state.position;\n      var _event$touches$2 = event.touches[0],\n          pageY = _event$touches$2.pageY,\n          pageX = _event$touches$2.pageX;\n      var movingPosition = isDirectionBottom(direction) || isDirectionTop(direction) ? pageY : pageX;\n      var delta = movingPosition - thumb;\n      var newPosition = isDirectionBottom(direction) ? position + delta : position - delta;\n\n      if (newPosition > 0 && _this.ALLOW_DRAWER_TRANSFORM) {\n        // stop android's pull to refresh behavior\n        event.preventDefault();\n\n        _this.props.onDrag({\n          newPosition: newPosition\n        }); // we set this, so we can access it in shouldWeCloseDrawer. Since setState is async, we're not guranteed we'll have the\n        // value in time\n\n\n        _this.MOVING_POSITION = movingPosition;\n        _this.NEW_POSITION = newPosition;\n        var positionThreshold = 0;\n\n        if (isDirectionRight(direction)) {\n          positionThreshold = _this.drawer.scrollWidth;\n        }\n\n        if (newPosition < positionThreshold && _this.shouldWeCloseDrawer()) {\n          _this.props.notifyWillClose(true);\n        } else {\n          _this.props.notifyWillClose(false);\n        } // not at the bottom\n\n\n        if (_this.NEGATIVE_SCROLL < newPosition) {\n          _this.setState(function () {\n            return {\n              thumb: movingPosition,\n              position: positionThreshold > 0 ? Math.min(newPosition, positionThreshold) : newPosition\n            };\n          });\n        }\n      }\n    }, _this.release = function (event) {\n      var direction = _this.props.direction;\n\n      _this.setState(function () {\n        return {\n          touching: false\n        };\n      });\n\n      if (_this.shouldWeCloseDrawer()) {\n        _this.hideDrawer();\n      } else {\n        var newPosition = 0;\n\n        if (isDirectionRight(direction)) {\n          newPosition = _this.drawer.scrollWidth;\n        }\n\n        _this.setState(function () {\n          return {\n            position: newPosition\n          };\n        });\n      }\n    }, _this.getNegativeScroll = function (element) {\n      var direction = _this.props.direction;\n\n      var size = _this.getElementSize();\n\n      if (isDirectionBottom(direction) || isDirectionTop(direction)) {\n        _this.NEGATIVE_SCROLL = size - element.scrollHeight - _this.MAX_NEGATIVE_SCROLL;\n      } else {\n        _this.NEGATIVE_SCROLL = size - element.scrollWidth - _this.MAX_NEGATIVE_SCROLL;\n      }\n    }, _this.hideDrawer = function () {\n      var _this$props2 = _this.props,\n          allowClose = _this$props2.allowClose,\n          onRequestClose = _this$props2.onRequestClose,\n          direction = _this$props2.direction;\n      var defaultPosition = 0;\n\n      if (isDirectionRight(direction)) {\n        defaultPosition = _this.drawer.scrollWidth;\n      }\n\n      if (allowClose === false) {\n        // if we aren't going to allow close, let's animate back to the default position\n        return _this.setState(function () {\n          return {\n            position: defaultPosition,\n            thumb: 0,\n            touching: false\n          };\n        });\n      }\n\n      _this.setState(function () {\n        return {\n          position: defaultPosition,\n          touching: false\n        };\n      }); // cleanup\n\n\n      _this.removeListeners();\n\n      onRequestClose();\n    }, _this.shouldWeCloseDrawer = function () {\n      var touchStart = _this.state.start;\n      var direction = _this.props.direction;\n      var initialPosition = 0;\n\n      if (isDirectionRight(direction)) {\n        initialPosition = _this.drawer.scrollWidth;\n      }\n\n      if (_this.MOVING_POSITION === initialPosition) return false;\n\n      if (isDirectionRight(direction)) {\n        return _this.NEW_POSITION < initialPosition && _this.MOVING_POSITION - touchStart > _this.SCROLL_TO_CLOSE;\n      } else if (isDirectionLeft(direction)) {\n        return _this.NEW_POSITION >= initialPosition && touchStart - _this.MOVING_POSITION > _this.SCROLL_TO_CLOSE;\n      } else if (isDirectionTop(direction)) {\n        return _this.NEW_POSITION >= initialPosition && touchStart - _this.MOVING_POSITION > _this.SCROLL_TO_CLOSE;\n      } else {\n        return _this.NEW_POSITION >= initialPosition && _this.MOVING_POSITION - touchStart > _this.SCROLL_TO_CLOSE;\n      }\n    }, _this.getDrawerTransform = function (value) {\n      var direction = _this.props.direction;\n\n      if (isDirectionBottom(direction)) {\n        return {\n          transform: \"translate3d(0, \" + value + \"px, 0)\"\n        };\n      } else if (isDirectionTop(direction)) {\n        return {\n          transform: \"translate3d(0, -\" + value + \"px, 0)\"\n        };\n      } else if (isDirectionLeft(direction)) {\n        return {\n          transform: \"translate3d(-\" + value + \"px, 0, 0)\"\n        };\n      } else if (isDirectionRight(direction)) {\n        return {\n          transform: \"translate3d(\" + value + \"px, 0, 0)\"\n        };\n      }\n    }, _this.getElementSize = function () {\n      if (isClientSide()) {\n        return isDirectionBottom(_this.props.direction) || isDirectionTop(_this.props.direction) ? window.innerHeight : window.innerWidth;\n      }\n    }, _this.inViewportChange = function (inView) {\n      _this.props.inViewportChange(inView);\n\n      _this.ALLOW_DRAWER_TRANSFORM = inView;\n    }, _this.preventDefault = function (event) {\n      return event.preventDefault();\n    }, _this.stopPropagation = function (event) {\n      return event.stopPropagation();\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  Drawer.prototype.componentDidMount = function componentDidMount() {\n    if (this.props.direction === \"y\") console.warning(\"Direction prop is now takes up or down, y is no longer supported!\");\n    if (this.props.direction === \"x\") console.warning(\"Direction prop is now takes left or right, x is no longer supported!\");\n  };\n\n  Drawer.prototype.componentDidUpdate = function componentDidUpdate(prevProps, nextState) {\n    var _this2 = this; // in the process of closing the drawer\n\n\n    if (!this.props.open && prevProps.open) {\n      this.removeListeners();\n      setTimeout(function () {\n        _this2.setState(function () {\n          return {\n            open: false\n          };\n        });\n      }, 300);\n    }\n\n    if (this.drawer) {\n      this.getNegativeScroll(this.drawer);\n    } // in the process of opening the drawer\n\n\n    if (this.props.open && !prevProps.open) {\n      this.props.onOpen();\n      this.setState(function () {\n        return {\n          open: true\n        };\n      });\n    }\n  };\n\n  Drawer.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.removeListeners();\n  };\n\n  Drawer.prototype.getPosition = function getPosition(hiddenPosition) {\n    var position = this.state.position;\n    var direction = this.props.direction;\n\n    if (isDirectionRight(direction)) {\n      return hiddenPosition - position;\n    } else {\n      return position;\n    }\n  };\n\n  Drawer.prototype.render = function render() {\n    var _this3 = this;\n\n    var _props = this.props,\n        containerElementClass = _props.containerElementClass,\n        dontApplyListeners = _props.dontApplyListeners,\n        id = _props.id,\n        getContainerRef = _props.getContainerRef,\n        getModalRef = _props.getModalRef,\n        direction = _props.direction;\n    var open = this.state.open && this.props.open; // If drawer isn't open or in the process of opening/closing, then remove it from the DOM\n    // also, if we're not client side we need to return early because createPortal is only\n    // a clientside method\n\n    if (!this.state.open && !this.props.open || !isClientSide()) {\n      return null;\n    }\n\n    var touching = this.state.touching;\n    var animationSpring = touching ? {\n      damping: 20,\n      stiffness: 300\n    } : presets.stiff;\n    var hiddenPosition = this.getElementSize();\n    var position = this.getPosition(hiddenPosition); // Style object for the container element\n\n    var containerStyle = {\n      backgroundColor: \"rgba(55, 56, 56, \" + (open ? 0.6 : 0) + \")\"\n    }; // If direction is right, we set the overflowX property to 'hidden' to hide the x scrollbar during\n    // the sliding animation\n\n    if (isDirectionRight(direction)) {\n      containerStyle = _extends({}, containerStyle, {\n        overflowX: \"hidden\"\n      });\n    }\n\n    return createPortal(React.createElement(Motion, {\n      style: {\n        translate: spring(open ? position : hiddenPosition, animationSpring)\n      },\n      defaultStyle: {\n        translate: hiddenPosition\n      }\n    }, function (_ref) {\n      var translate = _ref.translate;\n      return React.createElement(\"div\", {\n        id: id,\n        style: containerStyle,\n        onClick: _this3.hideDrawer,\n        className: Container + \" \" + containerElementClass + \" \",\n        ref: getContainerRef\n      }, React.createElement(Observer, {\n        className: HaveWeScrolled,\n        onChange: _this3.inViewportChange\n      }), React.createElement(\"div\", {\n        onClick: _this3.stopPropagation,\n        style: _this3.getDrawerTransform(translate),\n        ref: _this3.attachListeners,\n        className: _this3.props.modalElementClass || \"\"\n      }, _this3.props.children));\n    }), this.props.parentElement);\n  };\n\n  return Drawer;\n}(Component), _class.defaultProps = {\n  notifyWillClose: function notifyWillClose() {},\n  onOpen: function onOpen() {},\n  onDrag: function onDrag() {},\n  inViewportChange: function inViewportChange() {},\n  onRequestClose: function onRequestClose() {},\n  getContainerRef: function getContainerRef() {},\n  getModalRef: function getModalRef() {},\n  direction: \"bottom\",\n  parentElement: document.body,\n  allowClose: true,\n  dontApplyListeners: false,\n  containerElementClass: \"\",\n  modalElementClass: \"\"\n}, _temp2);\nexport { Drawer as default };\nDrawer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  open: PropTypes.bool.isRequired,\n  children: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.element]),\n  onRequestClose: PropTypes.func,\n  onDrag: PropTypes.func,\n  onOpen: PropTypes.func,\n  inViewportChange: PropTypes.func,\n  allowClose: PropTypes.bool,\n  notifyWillClose: PropTypes.func,\n  direction: PropTypes.string,\n  modalElementClass: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n  containerElementClass: PropTypes.string,\n  getContainerRef: PropTypes.func,\n  getModalRef: PropTypes.func\n} : {};\nvar Container = css(_templateObject);\nvar HaveWeScrolled = css(_templateObject2);","map":null,"metadata":{},"sourceType":"module"}